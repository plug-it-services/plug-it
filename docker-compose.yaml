version: "3.2"

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - ${RABBITMQ_UI_PORT}:15672
      - 5672:5672
    volumes:
        - rabbit_data:/var/lib/rabbitmq/
        - rabbit_logs:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    networks:
      - rabbit_network
    depends_on:
      - elk
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "rabbitmq"

  elk:
    image: sebp/elk
    ports:
      - ${KIBANA_UI_PORT}:5601
      - ${LOGSTASH_INGEST_PORT}:12201/udp
    volumes:
      - ./logstash.conf:/etc/logstash/conf.d/30-output.conf
      - elk_data:/var/lib/elasticsearch
    networks:
      - elk_network
    environment:
      - ES_JAVA_OPTS=-Xmx1g -Xms1g

  client_mobile:
    build: ./mobile
    depends_on:
      - client_web
    volumes:
      - client_data:/app

  client_web:
    build: ./web
    depends_on:
      - server
    ports:
      - ${CLIENT_PORT}:80
    volumes:
      - client_data:/usr/share/nginx/html

  server:
    image: traefik:latest
    ports:
      - ${SERVER_PORT}:80
      - ${TRAEFIK_UI_PORT}:8080
    networks:
      - traefik_network
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --log.level=DEBUG
      - --providers.docker.network=${COMPOSE_PROJECT_NAME}_traefik_network
      - --providers.docker.exposedbydefault=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "server"

  ###################   MICROSERVICES  #######################

  user:
    build: ./api/user
    networks:
      - rabbit_network
      - user_network
      - traefik_network
    labels:
      - traefik.http.routers.users.rule=PathPrefix(`/auth`)
      - traefik.http.middlewares.auth-replacepathregex.replacepathregex.regex=^/auth/(.*)
      - traefik.http.middlewares.auth-replacepathregex.replacepathregex.replacement=/public/$$1
      - traefik.http.routers.users.middlewares=auth-replacepathregex
      - traefik.enable=true
    ports:
      - ${USER_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - user-postgres
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "user"

  user-postgres:
    image: 'postgres:latest'
    networks:
      - user_network
    env_file:
      - ./api/user/.env
    volumes:
      - user_data:/var/lib/postgresql/data
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "user-postgres"


  plugs-mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    env_file:
      - ./api/plugs/.env
    volumes:
      - plugs_mongo_data:/data/db
    networks:
      - plugs_network
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "plugs-mongo"

  plugs:
    build: ./api/plugs
    networks:
      - rabbit_network
      - traefik_network
      - plugs_network
    labels:
      - traefik.http.routers.plugs.rule=Path(`/services`) || PathPrefix(`/plugs`) || Path(`/service/{service:.*}/events`) || Path(`/service/{service:.*}/actions`)
      - traefik.http.routers.about.rule=Path(`/about.json`)
      - traefik.http.middlewares.add-public.addprefix.prefix=/public
      - traefik.http.middlewares.test-auth.forwardauth.address=http://user/verify
      - traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=user
      - traefik.http.routers.plugs.middlewares=add-public, test-auth
      - traefik.http.routers.about.middlewares=add-public
      - traefik.enable=true
    ports:
      - ${PLUGS_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - plugs-mongo
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "plugs"

  twitter-postgres:
    image: 'postgres:latest'
    networks:
      - twitter_network
    env_file:
      - ./api/twitter/.env
    volumes:
      - twitter_data:/var/lib/postgresql/data
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "twitter-potgres"

  twitter:
    build: ./api/twitter
    networks:
      - rabbit_network
      - traefik_network
      - twitter_network
    labels:
      - traefik.http.routers.twitter-oauth2-callback.rule=Path(`/service/twitter/callback`)
      - traefik.http.routers.twitter.rule=Path(`/service/twitter/oauth2`) || Path(`/service/twitter/disconnect`)
      - traefik.http.middlewares.twitter-replacepathregex.replacepathregex.regex=^/service/twitter/(.*)
      - traefik.http.middlewares.twitter-replacepathregex.replacepathregex.replacement=/public/$$1
      - traefik.http.middlewares.test-auth.forwardauth.address=http://user/verify
      - traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=user
      - traefik.http.routers.twitter.middlewares=twitter-replacepathregex, test-auth
      - traefik.http.routers.twitter-oauth2-callback.middlewares=twitter-replacepathregex
      - traefik.enable=true
    ports:
      - ${TWITTER_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - twitter-postgres
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "twitter"


  starton:
    build: ./api/starton
    networks:
      - rabbit_network
      - traefik_network
      - starton_network
    labels:
      - traefik.http.routers.starton.rule=PathPrefix(`/service/starton`)
      - traefik.http.routers.starton-webhook.rule=PathPrefix(`/webhook/starton`)
      - traefik.http.middlewares.starton-replacepathregex.replacepathregex.regex=^/servicewebhook/starton/(.*)
      - traefik.http.middlewares.starton-replacepathregex.replacepathregex.replacement=/public/$$1
      - traefik.http.middlewares.starton-webhook-replacepathregex.replacepathregex.regex=^/webhook/starton/(.*)
      - traefik.http.middlewares.starton-webhook-replacepathregex.replacepathregex.replacement=/public/$$1
      - traefik.http.middlewares.test-auth.forwardauth.address=http://user/verify
      - traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=user
      - traefik.http.routers.starton.middlewares=starton-replacepathregex, test-auth
      - traefik.http.routers.starton-webhook.middlewares=starton-webhook-replacepathregex
      - traefik.enable=true
    ports:
      - ${STARTON_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - starton-postgres
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "starton"

  starton-postgres:
    image: 'postgres:latest'
    networks:
      - starton_network
    env_file:
      - ./api/starton/.env
    volumes:
      - starton_data:/var/lib/postgresql/data
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:${LOGSTASH_INGEST_PORT}
        tag: "starton-postgres"

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik_network
      - user_network
      - plugs_network
      - starton_network
      - twitter_network
    ports:
      - 7000:8080

volumes:
  rabbit_data:
  rabbit_logs:
  client_data:
  elk_data:
  plugs_mongo_data:
  twitter_data:
  starton_data:
  user_data:

networks:
  rabbit_network:
  elk_network:
  user_network:
  plugs_network:
  starton_network:
  traefik_network:
  twitter_network: