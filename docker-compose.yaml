version: "3.2"

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - ${RABBITMQ_UI_PORT}:15672
      - 5672:5672
    volumes:
        - rabbit_data:/var/lib/rabbitmq/
        - rabbit_logs:/var/log/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    networks:
      - rabbit_network

  elk:
    image: sebp/elk
    ports:
      - ${KIBANA_UI_PORT}:5601
      - 12201:12201/udp
    volumes:
      - ./logstash.conf:/etc/logstash/conf.d/30-output.conf
      - elk_data:/var/lib/elasticsearch
    networks:
      - elk_network

  client_mobile:
    build: ./mobile
    depends_on:
      - client_web
    volumes:
      - client_data:/app

  client_web:
    build: ./web
    depends_on:
      - server
    ports:
      - ${CLIENT_PORT}:80
    volumes:
      - client_data:/usr/share/nginx/html

  server:
    image: traefik:latest
    ports:
      - ${SERVER_PORT}:80
      - ${TRAEFIK_UI_PORT}:8080
    networks:
      - traefik_network
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --log.level=DEBUG
      - --providers.docker.network=${COMPOSE_PROJECT_NAME}_traefik_network
      - --providers.docker.exposedbydefault=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ###################   MICROSERVICES  #######################

  user:
    build: ./api/user
    networks:
      - rabbit_network
      - user_network
      - traefik_network
    labels:
      - traefik.http.routers.users.rule=PathPrefix(`/auth`)
      - traefik.http.middlewares.auth-replacepathregex.replacepathregex.regex=^/auth/(.*)
      - traefik.http.middlewares.auth-replacepathregex.replacepathregex.replacement=/public/$$1
      - traefik.http.routers.users.middlewares=auth-replacepathregex
      - traefik.enable=true
    ports:
      - ${USER_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - user-postgres

  user-postgres:
    image: 'postgres:latest'
    networks:
      - user_network
    env_file:
      - ./api/user/.env

  plugs-mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    env_file:
      - ./api/plugs/.env
    volumes:
      - plugs_mongo_data:/data/db
    networks:
      - plugs_network

  plugs:
    build: ./api/plugs
    networks:
      - rabbit_network
      - traefik_network
      - plugs_network
    labels:
      - traefik.http.routers.plugs.rule=PathPrefix(`/service`) || PathPrefix(`/plugs`)
      - traefik.http.middlewares.add-public.addprefix.prefix=/public
      - traefik.http.middlewares.test-auth.forwardauth.address=http://user/verify
      - traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=user
      - traefik.http.routers.plugs.middlewares=add-public, test-auth
      - traefik.enable=true
    ports:
      - ${PLUGS_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - plugs-mongo

  twitter-postgres:
    image: 'postgres:latest'
    networks:
      - twitter_network
    ports:
      - 5433:5432
    env_file:
      - ./api/twitter/.env
  starton:
    build: ./api/starton
    networks:
      - rabbit_network
      - traefik_network
      - starton_network
    labels:
      - traefik.http.routers.plugs.rule=PathPrefix(`/service/starton`)
      - traefik.http.middlewares.add-public.addprefix.prefix=/public
      - traefik.http.middlewares.test-auth.forwardauth.address=http://user/verify
      - traefik.http.middlewares.test-auth.forwardauth.authResponseHeaders=user
      - traefik.http.routers.plugs.middlewares=add-public, test-auth
      - traefik.enable=true
    ports:
      - ${STARTON_PORT}:80
    depends_on:
      - rabbitmq
      - elk
      - plugs-mongo

  starton-postgres:
    image: 'postgres:latest'
    networks:
      - starton_network
    env_file:
      - ./api/starton/.env


volumes:
  rabbit_data:
  rabbit_logs:
  client_data:
  elk_data:
  plugs_mongo_data:

networks:
  rabbit_network:
  elk_network:
  user_network:
  plugs_network:
  starton_network:
  traefik_network:
  twitter_network: